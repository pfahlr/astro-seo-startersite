---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import EpisodeCard from '../../components/EpisodeCard.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import podcastConfig from "../../../podcast.config.json";
import { htmlToText } from 'html-to-text';
import { optimizeImage } from '../../utils/imageProcessor';

let processedEpisodes:any = [];

const episodes = (await getCollection('podcast')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

//optimizeImage is an async function, so it must be called with await, which can only
//be done in an async function
async function preprocessPosts(posts) {
    for (const post of posts) {
    if (post.data.cover) {

      post.data.cover = await optimizeImage(post.data.cover);
    }
  }
	return posts;
}

processedEpisodes = await preprocessPosts(episodes); 


---
<BaseHead title=` ${podcastConfig.name} | ${SITE_TITLE}` description={SITE_DESCRIPTION} />
<Header />
<main>
<h2>{podcastConfig.name}</h2>
<section id="blog-posts" class="blog-posts">
		{
			processedEpisodes.map((episode) => (
			<EpisodeCard
				title={episode.data.title}
				cover={episode.data.cover}
				desc={htmlToText(episode.body.slice(0, 500))}
				url={"/podcast/" + episode.slug}
				audioUrl={episode.data.audioUrl}
				pubDate={episode.data.pubDate}
				duration={episode.data.duration}
				id={"card-" + episode.data.episode}
			/>
			))
		}
</section>
<Footer />