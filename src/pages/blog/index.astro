---
import Layout from '../../layouts/Layout.astro';
import HeroBanner from '../../components/HeroBanner.astro';

import PostList from '../../components/PostList.astro';
import BlogPostCard from '../../components/BlogPostCard.astro';
import { SITE_INFO } from '../../consts';
import { optimizeImage } from '../../utils/imageProcessor';
import { getCollection } from 'astro:content';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

let processedPosts:any = [];
//optimizeImage is an async function, so it must be called with await, which can only
//be done in an async function
async function preprocessPosts(posts) {
    for (const post of posts) {
    if (post.data.heroImage) {
      post.data.heroImage = await optimizeImage(post.data.heroImage,720,360);
    }
  }
	return posts;
}

//and we must await here because we fired off a whole list of async functions
//and they will most certainly not return immediately after the call. which
//is exactly why when await is used inside a function that function must be 
//asynchronous. Because all the way at the top, there must be one final await.
//it's somewhat like recursion, but also in parallel. or whatever, that's how
//I can think about it. 

processedPosts = await preprocessPosts(posts); 

let data = {
	'title':SITE_INFO.site_title,
	'description': SITE_INFO.blog_description,
	'keywords': SITE_INFO.blog_keywords
}
const title = "Welcome to Our Blog";
---
<Layout data={data}>	
  <HeroBanner title={title} description={SITE_INFO.blog_description}/>
	<PostList> 
	 {processedPosts.map(item => (
     <BlogPostCard id={item.id} hero={item.data.heroImage} description={item.data.description} pubdate={item.data.pubDate} title={item.data.title} heroalt={item.data.heroAlt} />
	 ))}
  </PostList>
</Layout>
