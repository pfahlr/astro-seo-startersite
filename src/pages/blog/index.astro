---
import Layout from '../../layouts/Layout.astro';
import { SITE_TITLE, SITE_DESCRIPTION, BLOG_DESCRIPTION, BLOG_KEYWORDS} from '../../consts';
import { optimizeImage } from '../../utils/imageProcessor';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

let processedPosts:any = [];
//optimizeImage is an async function, so it must be called with await, which can only
//be done in an async function
async function preprocessPosts(posts) {
    for (const post of posts) {
    if (post.data.heroImage) {
      post.data.heroImage = await optimizeImage(post.data.heroImage);
    }
  }
	return posts;
}

//and we must await here because we fired off a whole list of async functions
//and they will most certainly not return immediately after the call. which
//is exactly why when await is used inside a function that function must be 
//asynchronous. Because all the way at the top, there must be one final await.
//it's somewhat like recursion, but also in parallel. or whatever, that's how
//I can think about it. 

processedPosts = await preprocessPosts(posts); 

let data = {
	'title':SITE_TITLE,
	'description': BLOG_DESCRIPTION,
	'keywords': BLOG_KEYWORDS
}
---
<Layout data={data}>	
		<main>
			<section>
				<ul class="flex flex-wrap">
					{
						processedPosts.map((post) => (
							<li class="box-content p-4 m-4 bg-sky-300">
								<a href={`/blog/${post.id}/`}>
								  <img width={720} height={360} src={post.data.heroImage} alt="" />
									<h3 class="text-2xl">{post.data.title}</h3>
									<p class="text-lg">
										<FormattedDate date={post.data.pubDate} />
									</p>										

								</a>
							</li>
						))
					}
				</ul>
			</section>
		</main>
</Layout>